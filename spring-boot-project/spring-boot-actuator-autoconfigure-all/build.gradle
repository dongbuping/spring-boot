/*
 * Copyright 2012-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
	id "java-library"
	id "org.springframework.boot.auto-configuration"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot Actuator AutoConfigure All"

configurations.all {
	resolutionStrategy.eachDependency {
		if (it.requested.group == 'org.opensaml') {
			it.useVersion '4.0.1'
		}
	}
}

dependencies {
	api(project(":spring-boot-project:spring-boot-actuator-autoconfigure"))
	api(project(":spring-boot-project:spring-boot-autoconfigure"))

	optional(project(":spring-boot-project:spring-boot-jersey"))
	optional(project(":spring-boot-project:spring-boot-security"))
	optional(project(":spring-boot-project:spring-boot-security-oauth2-client"))
	optional(project(":spring-boot-project:spring-boot-security-oauth2-resource-server"))
	optional(project(":spring-boot-project:spring-boot-security-saml2"))
	optional(project(":spring-boot-project:spring-boot-web-server"))
	optional(project(":spring-boot-project:spring-boot-webmvc"))
	optional("io.projectreactor:reactor-core")
	optional("jakarta.servlet:jakarta.servlet-api")

	testImplementation(project(":spring-boot-project:spring-boot-data-cassandra"))
	testImplementation(project(":spring-boot-project:spring-boot-data-rest"))
	testImplementation(project(":spring-boot-project:spring-boot-hateoas"))
	testImplementation(project(":spring-boot-project:spring-boot-http-codec"))
	testImplementation(project(":spring-boot-project:spring-boot-http-converter"))
	testImplementation(project(":spring-boot-project:spring-boot-jackson"))
	testImplementation(project(":spring-boot-project:spring-boot-reactor-netty"))
	testImplementation(project(":spring-boot-project:spring-boot-test"))
	testImplementation(project(":spring-boot-project:spring-boot-tomcat"))
	testImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support"))
	testImplementation(project(":spring-boot-project:spring-boot-webflux"))
	testImplementation("org.springframework.security:spring-security-test")
	
	testRuntimeOnly("ch.qos.logback:logback-classic")
}

tasks.named("test") {
	jvmArgs += "--add-opens=java.base/java.net=ALL-UNNAMED"
}
