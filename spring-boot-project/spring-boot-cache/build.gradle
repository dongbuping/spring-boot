/*
 * Copyright 2012-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


plugins {
	id "java-library"
	id "org.springframework.boot.auto-configuration"
	id "org.springframework.boot.configuration-properties"
	id "org.springframework.boot.deployed"
	id "org.springframework.boot.docker-test"
	id "org.springframework.boot.optional-dependencies"
}

description = "Spring Boot Cache"

dependencies {
	api(project(":spring-boot-project:spring-boot"))
	api("org.springframework:spring-context-support")

	optional(project(":spring-boot-project:spring-boot-actuator-autoconfigure"))
	optional(project(":spring-boot-project:spring-boot-autoconfigure"))
	optional(project(":spring-boot-project:spring-boot-data-couchbase"))
	optional(project(":spring-boot-project:spring-boot-data-redis"))
	optional(project(":spring-boot-project:spring-boot-hazelcast"))
	optional(project(":spring-boot-project:spring-boot-jpa"))
	optional(project(":spring-boot-project:spring-boot-metrics"))
	optional("com.hazelcast:hazelcast-spring")
	optional("io.micrometer:micrometer-core")
	optional("javax.cache:cache-api")
	optional("org.cache2k:cache2k-micrometer")
	optional("org.cache2k:cache2k-spring")
	optional("org.ehcache:ehcache") {
		artifact {
			classifier = 'jakarta'
		}
	}
	optional("org.hibernate.orm:hibernate-core")
	optional("org.hibernate.orm:hibernate-jcache")
	optional("org.infinispan:infinispan-commons")
	optional("org.infinispan:infinispan-component-annotations")
	optional("org.infinispan:infinispan-core")
	optional("org.infinispan:infinispan-jcache")
	optional("org.infinispan:infinispan-spring6-embedded")

	dockerTestImplementation(project(":spring-boot-project:spring-boot-test"))
	dockerTestImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support-docker"))
	dockerTestImplementation("com.redis:testcontainers-redis")
	dockerTestImplementation("org.testcontainers:junit-jupiter")
	dockerTestImplementation("org.testcontainers:testcontainers")

	testImplementation(project(":spring-boot-project:spring-boot-test"))
	testImplementation(project(":spring-boot-project:spring-boot-tools:spring-boot-test-support"))
	testImplementation(testFixtures(project(":spring-boot-project:spring-boot-autoconfigure")))
	testImplementation(testFixtures(project(":spring-boot-project:spring-boot-jersey")))
	testImplementation(testFixtures(project(":spring-boot-project:spring-boot-webmvc")))
	testImplementation(testFixtures(project(":spring-boot-project:spring-boot-webflux")))

	testRuntimeOnly("ch.qos.logback:logback-classic")
}
